快慢指针⼀般都初始化指向链表的头结点 head，前进时快指针 fast 在前， 慢指针 slow 在后，巧妙解决⼀些链表中的问题。

1、判断链表中是否含有环
单链表的特点是每个节点只知道下一个节点，所以一个指针的话无法判断链表中是否含有环的

如果链表中不含环，那么这个指针最终会遇到空指针 null 表⽰链表到头 了，这还好说，可以判断该链表不含环。

若链表中包含环，经典解法就是⽤两个指针，⼀个跑得快，⼀个跑得慢，慢指针一次移动1次，快指针一次移动2次
如果不含有环，跑得快的那个指针最终会遇到null，说明链表不含环；
如果含有环，快指针最终会超慢指针⼀圈，和慢指针相遇，说明链表含有环


快慢指针为什么一定会相遇？
首先两者相遇，肯定是在那个环里，比如最好情况慢的指针一踏入环就和快指针相遇。
然后我们要明确快慢指针的速度差为1，两者每移动一下，距离减1，而这个环的最小划分单位就是1，所以显然会相遇。


2、已知链表中含有环，返回这个环的起始位置
当快慢指针相遇时，让其中任⼀个指针指向头节点，然后让它俩 以相同速度前进，再次相遇时所在的节点位置就是环开始的位置
原因：
第⼀次相遇时，假设慢指针 slow ⾛了 k 步，那么快指针 fast ⼀定⾛了 2k 步，也就是说⽐ slow 多⾛了 k 步（也就是环的⻓度）。

设相遇点距环的起点的距离为 m，那么环的起点距头结点 head 的距离为 k - m，也就是说如果从 head 前进 k - m 步就能到达环起点。

巧的是，如果从相遇点继续前进 k - m 步，也恰好到达环起点。
所以，只要我们把快慢指针中的任⼀个重新指向 head，然后两个指针同速 前进，k - m 步后就会相遇，相遇之处就是环的起点了。

注释：具体的图可以参考  /已知链表中含有环，返回这个环的起始位置


3、寻找链表的中点
设置快慢指针，让快指针一次前进2步，慢指针一次前进一步，当快指针到达链表尽头时，慢指针就处于链表的中间位置。
当链表的⻓度是奇数时，slow 恰巧停在中点位置；如果⻓度是偶数，slow 最终的位置是中间偏右

寻找链表中点的⼀个重要作⽤是对链表进⾏归并排序。
回想数组的归并排序：求中点索引递归地把数组⼆分，最后合并两个有序数 组。
对于链表，合并两个有序链表是很简单的，难点就在于⼆分。


